import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';



export async function POST(request) {
    let connection;
    
    try {
        console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TimeWeb MySQL...');
        console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
        console.log('DB_HOST:', process.env.DB_HOST);
        console.log('DB_USER:', process.env.DB_USER);
        console.log('DB_NAME:', process.env.DB_NAME);
        console.log('DB_PORT:', process.env.DB_PORT);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        const body = await request.json();
        const { fio, email, region } = body;

        console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', { fio, email, region });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!fio || !email || !region) {
        return NextResponse.json(
            { message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' },
            { status: 400 }
        );
        }

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MySQL
        const mysql = await import('mysql2/promise');
        
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ TimeWeb MySQL...');
        
        // –ü—É—Ç—å –∫ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É
        const sslCertPath = path.join(process.cwd(), 'certs', 'root.crt');
        
        console.log('üìÅ –ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É:', sslCertPath);
        console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', fs.existsSync(sslCertPath));

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è TimeWeb Cloud
        const connectionConfig = {
            host: process.env.DB_HOST,
            port: parseInt(process.env.DB_PORT) || 3306, // –Ø–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
            user: process.env.DB_USER,
            password: process.env.DB_PASSWORD,
            database: process.env.DB_NAME,
            connectTimeout: 15000,
            acquireTimeout: 15000,
            timeout: 15000,
            // SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è TimeWeb
            ssl: {
                ca: fs.readFileSync(sslCertPath),
                rejectUnauthorized: true
            }
        };

        console.log('üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
        console.log('- –•–æ—Å—Ç:', connectionConfig.host);
        console.log('- –ü–æ—Ä—Ç:', connectionConfig.port);
        console.log('- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', connectionConfig.user);
        console.log('- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', connectionConfig.database);

        console.log('üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã');
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        connection = await mysql.createConnection(connectionConfig);
        
        console.log('‚úÖ SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ TimeWeb MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await createTableIfNotExists(connection);

        // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        const [result] = await connection.execute(
            'INSERT INTO registrations (fio, email, region) VALUES (?, ?, ?)',
            [fio, email, region]
        );

        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ TimeWeb MySQL, ID:', result.insertId);

        return NextResponse.json(
            { 
                message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!',
                id: result.insertId 
            },
            { status: 201 }
        );

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ TimeWeb MySQL:');
        console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
        console.error('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);
        console.error('–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', error.stack);
        
        return NextResponse.json(
            { 
                message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
                details: process.env.NODE_ENV === 'development' ? `ECONNREFUSED - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç. –•–æ—Å—Ç: ${process.env.DB_HOST}, –ü–æ—Ä—Ç: ${process.env.DB_PORT}` : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            },
            { status: 500 }
        );

    } finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (connection) {
            try {
                await connection.end();
                console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MySQL –∑–∞–∫—Ä—ã—Ç–æ');
            } catch (closeError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', closeError);
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
async function createTableIfNotExists(connection) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        const [tables] = await connection.execute(
            `SELECT TABLE_NAME 
            FROM information_schema.TABLES 
            WHERE TABLE_SCHEMA = ? AND TABLE_NAME = ?`,
            [process.env.DB_NAME, 'registrations']
        );

        if (tables.length === 0) {
            console.log('üÜï –¢–∞–±–ª–∏—Ü–∞ "registrations" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º...');
            
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            await connection.execute(`
                CREATE TABLE registrations (
                id INT AUTO_INCREMENT PRIMARY KEY,
                fio VARCHAR(255) NOT NULL,
                email VARCHAR(255) NOT NULL,
                region VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            `);

            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ "registrations" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ "registrations" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', error);
        throw error;
    }
}